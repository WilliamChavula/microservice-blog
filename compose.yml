services:
  microservice-db:
    image: postgres:17-alpine3.20
    container_name: api-db
    networks:
      - microservice-internal
      - microservice-external
    restart: always
    shm_size: 128mb
    ports:
      - "5678:5432"
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER}", "-d", "${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 30s
    volumes:
      - ./volumes/postgres-db:/var/lib/postgresql/data
      - ./scripts:/docker-entrypoint-initdb.d

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper-container
    networks:
      - microservice-internal
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka-container
    networks:
      - microservice-internal
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper-container:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0

  auth-api-img:
    container_name: auth-api-container
    networks:
      - microservice-internal
    restart: always
    env_file: ./auth-api/.env
    depends_on:
      - microservice-db
    build:
      context: ./auth-api
      dockerfile: Dockerfile
    volumes:
      - ./auth-api:/api/auth-api
      - /api/auth-api/node_modules #  container manages its own node_modules. Fix esbuild architecture mismatch between container & host.
    command: pnpm dev

  posts-api-img:
    container_name: posts-api-container
    networks:
      - microservice-internal
      - microservice-external
    restart: always
    env_file: ./posts-api/.env
    depends_on:
        microservice-db:
          condition: service_healthy
    build:
      context: ./posts-api
      dockerfile: Dockerfile
    volumes:
      - ./posts-api:/api/posts-api
      - /api/posts-api/node_modules
    command: pnpm dev:tsx

  authorization-api-img:
    container_name: authorization-api-container
    networks:
      - microservice-internal
    restart: always
    env_file: ./authorization-api/.env
    build:
      context: ./authorization-api
      dockerfile: Dockerfile
    volumes:
      - ./authorization-api:/api/authorization-api
      - /api/authorization-api/node_modules
    command: pnpm dev

  audit-api-img:
    container_name: audit-api-container
    networks:
      - microservice-internal
    restart: always
    env_file: ./audit-api/.env
    depends_on:
      microservice-db:
        condition: service_healthy
    build:
      context: ./audit-api
      dockerfile: Dockerfile
    volumes:
      - ./audit-api:/api/audit-api
      - /api/audit-api/node_modules
    command: pnpm dev

  api-gateway-img:
    container_name: api-gateway-container
    networks:
      - microservice-internal
    restart: always
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    volumes:
      - ./api-gateway:/api/api-gateway
      - /api/api-gateway/node_modules
    command: pnpm dev

networks:
  microservice-external:
    external: true
  microservice-internal: